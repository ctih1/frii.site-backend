# pylint: disable=relative-beyond-top-level
from .Database import Database
from pymongo.collection import Collection
from pymongo.cursor import Cursor
from .Utils import generate_random_string
from .Session import Session
import time

class Vulnerability:
    def __init__(self,db:Database):
        self.db=db

    def get_report(self,_id:str) -> dict:
        """Gets vulneraiblity report data

        Args:
            _id (str): case id

        Raises:
            ValueError: if no case is found

        Returns:
            dict: report
        """
        cursor:Cursor
        results_found:list=[]
        cursor=self.db.vuln_collection.find({"_id":_id})
        for result in cursor:
            results_found.append(result)
        if(results_found.__len__()==0): raise ValueError("No case found")
        return results_found[0]

    def __save_report(self,data:dict) -> None:
        self.db.vuln_collection.insert_one(data)

    def __update_report(self,_id:str, args:dict) -> None:
        self.db.vuln_collection.update_one(
            {"_id":_id},
            {"$set":args,},
            upsert=False
        )
    def __append_report(self,_id:str, args:dict) -> None:
        self.db.vuln_collection.update_one(
            {"_id":_id},
            {"$push":args},
            upsert=False
        )
    def __add_report_progress(self,id:str,progress:str,time:int) -> None:
        self.__append_report(id,args={
            "progress.progress": {
                progress:time
            }
        })
    def create(self,endpoint:str,email:str,expected:str,actual:str,importance:int,description:str,steps:str,impact:str,attacker:str) -> str:
        report_id:str=generate_random_string(24)
        self.__save_report({
            "_id":report_id,
            "endpoint":endpoint,
            "email":email,
            "expected":expected,
            "actual":actual,
            "importance":importance,
            "deemed-importance":0,
            "description":description,
            "steps":steps,
            "impact":impact,
            "solved":False,
            "attacker":attacker,
            "progress":{"steps":{"seen":False,"reviewed":False,"currently_working":False,"done":False},"progress":[{"Report recieved":round(time.time())}]}
        })
        return report_id

    @Session.requires_auth
    @Session.requires_permission("reports")
    def report_progress(self,id:str,progress:str,time:str,session:Session) -> bool:
        self.__add_report_progress(id,progress,time)
        return True

    @Session.requires_auth
    @Session.requires_permission("reports")
    def get_reports(self,session:Session):
        cursor:Cursor
        results_found:list=[]
        cursor=self.db.vuln_collection.find()
        for result in cursor:
            results_found.append(result)
        return results_found

    @Session.requires_auth
    @Session.requires_permission("reports")
    def delete_report(self,id:str,session:Session) -> bool:
        self.db.vuln_collection.delete_one({"_id":id})
        return True

    @Session.requires_auth
    @Session.requires_permission("reports")
    def mark_as_solved(self,id:str,session:Session) -> bool:
        self.__update_report(id,{"solved":True})
        return True

    @Session.requires_auth
    @Session.requires_permission("reports")
    def report_status(self,id:str,status:str,mode:bool,importance:int,session:Session) -> int:
        """Adds status to reports

        Args:
            id (str): case id
            status (str): what status [seen done reviewed currently_working]
            mode (bool): set true or false
            importance (int): how important the report is
            token (Token): auth token

        Returns:
            success:
                1
            error:
                0 - invalid stauts
                1 - No permissons
        """
        if(status.lower() not in ["seen","done","reviewed","currently_working"]):
            return 0
        self.__update_report(id,{f"progress.steps.{status.lower()}":mode})
        if(int(importance)>=0):
            self.__update_report(id,{"deemed-importance":importance})
        return 1
